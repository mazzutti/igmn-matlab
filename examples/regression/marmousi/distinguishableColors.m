% DISTINGUISHABLE_COLORS: Generate a set of maximally perceptually distinct colors
%
% This function generates a set of colors that are distinguishable by 
% reference to the "Lab" color space, which closely matches human color 
% perception. It is useful for plotting multiple lines or objects where 
% distinct colors are required.
%
% Syntax:
%   colors = distinguishableColors(n_colors)
%   colors = distinguishableColors(n_colors, bg)
%   colors = distinguishableColors(n_colors, bg, func)
%
% Inputs:
%   n_colors - (scalar) Number of distinct colors to generate.
%   bg       - (optional) Background color(s) to ensure generated colors 
%              are distinguishable from. Can be:
%                - RGB triple (e.g., [1 1 1] for white)
%                - Standard "ColorSpec" string (e.g., 'w' for white)
%                - Cell array of colors (e.g., {'w', 'k'})
%                - Numeric array of colors (n-by-3 matrix)
%              Default: [1 1 1] (white background).
%   func     - (optional) Custom function for RGB-to-Lab color conversion.
%              Default: Uses MATLAB's image processing toolbox functions 
%              `makecform` and `applycform`.
%
% Outputs:
%   colors - (n_colors-by-3 matrix) Each row represents an RGB color triple.
%
% Examples:
%   % Generate 25 distinguishable colors
%   c = distinguishableColors(25);
%   figure;
%   image(reshape(c, [1 size(c)]));
%
%   % Generate colors distinguishable from white and black backgrounds
%   c = distinguishableColors(25, {'w', 'k'});
%
%   % Use a custom RGB-to-Lab conversion function
%   func = @(x) colorspace('RGB->Lab', x);
%   c = distinguishableColors(25, 'w', func);
%
% Notes:
% - The function uses a "greedy" algorithm to iteratively select colors 
%   that maximize perceptual distance in Lab space.
% - If the number of requested colors exceeds the available distinguishable 
%   colors, an error is thrown.
%
% Dependencies:
% - MATLAB's image processing toolbox (for default RGB-to-Lab conversion).
% - Alternatively, a custom RGB-to-Lab conversion function can be provided.
%
% Author:
%   Timothy E. Holy, 2010-2011
%
% See also:
%   makecform, applycform, colorspace
function colors = distinguishableColors(n_colors, bg,func)
  if (nargin < 2)
    bg = [1 1 1];  % default white background
  else
    if iscell(bg)
      % User specified a list of colors as a cell aray
      bgc = bg;
      for i = 1:length(bgc)
	bgc{i} = parsecolor(bgc{i});
      end
      bg = cat(1,bgc{:});
    else
      % User specified a numeric array of colors (n-by-3)
      bg = parsecolor(bg);
    end
  end
  
  % Generate a sizable number of RGB triples. This represents our space of
  % possible choices. By starting in RGB space, we ensure that all of the
  % colors can be generated by the monitor.
  n_grid = 30;  % number of grid divisions along each axis in RGB space
  x = linspace(0,1,n_grid);
  [R,G,B] = ndgrid(x,x,x);
  rgb = [R(:) G(:) B(:)];
  if (n_colors > size(rgb,1)/3)
    error('You can''t readily distinguish that many colors');
  end
  
  % Convert to Lab color space, which more closely represents human
  % perception
  if (nargin > 2)
    lab = func(rgb);
    bglab = func(bg);
  else
    C = makecform('srgb2lab');
    lab = applycform(rgb,C);
    bglab = applycform(bg,C);
  end
  % If the user specified multiple background colors, compute distances
  % from the candidate colors to the background colors
  mindist2 = inf(size(rgb,1),1);
  for i = 1:size(bglab,1)-1
    dX = bsxfun(@minus,lab,bglab(i,:)); % displacement all colors from bg
    dist2 = sum(dX.^2,2);  % square distance
    mindist2 = min(dist2,mindist2);  % dist2 to closest previously-chosen color
  end
  
  % Iteratively pick the color that maximizes the distance to the nearest
  % already-picked color
  colors = zeros(n_colors,3);
  lastlab = bglab(end,:);   % initialize by making the "previous" color equal to background
  for i = 1:n_colors
    dX = bsxfun(@minus,lab,lastlab); % displacement of last from all colors on list
    dist2 = sum(dX.^2,2);  % square distance
    mindist2 = min(dist2,mindist2);  % dist2 to closest previously-chosen color
    [~,index] = max(mindist2);  % find the entry farthest from all previously-chosen colors
    colors(i,:) = rgb(index,:);  % save for output
    lastlab = lab(index,:);  % prepare for next iteration
  end
end
function c = parsecolor(s)
  if ischar(s)
    c = colorstr2rgb(s);
  elseif isnumeric(s) && size(s,2) == 3
    c = s;
  else
    error('MATLAB:InvalidColorSpec','Color specification cannot be parsed.');
  end
end
function c = colorstr2rgb(c)
  % Convert a color string to an RGB value.
  % This is cribbed from Matlab's whitebg function.
  % Why don't they make this a stand-alone function?
  rgbspec = [1 0 0;0 1 0;0 0 1;1 1 1;0 1 1;1 0 1;1 1 0;0 0 0];
  cspec = 'rgbwcmyk';
  k = find(cspec==c(1));
  if isempty(k)
    error('MATLAB:InvalidColorString','Unknown color string.');
  end
  if k~=3 || length(c)==1,
    c = rgbspec(k,:);
  elseif length(c)>2,
    if strcmpi(c(1:3),'bla')
      c = [0 0 0];
    elseif strcmpi(c(1:3),'blu')
      c = [0 0 1];
    else
      error('MATLAB:UnknownColorString', 'Unknown color string.');
    end
  end
end
