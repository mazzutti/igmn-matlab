function bestParams = optimize(algorithm, dataCache, lb, ub, inputVars, outputVars, useMex)

    switch algorithm
        case 'particleswarm'
            algOptions = optimoptions(...
                'particleswarm', ...
                'Display', 'iter', ...
                'UseParallel', true, ...
                'SwarmSize', 300, ... 
                'MaxStallIterations', 50, ...
                'PlotFcn','pswplotbestf', ...
                'HybridFcn',  'fmincon'); % 'fmincon' | 'patternsearch'
            bestParams = particleswarm(@(params) ...
                runOptimization(params, dataCache, inputVars, outputVars, useMex), ... 
                length(lb), lb, ub, algOptions);
        case 'ga'
            algOptions = optimoptions(...
                 'ga', ...
                 'Display', 'iter', ...
                 'UseParallel', true, ...
                 'MaxStallGenerations', 200, ...
                 'PlotFcn', 'gaplotbestf');
            bestParams = ga(@(params) ...
                runOptimization(params, dataCache, inputVars, outputVars, useMex), ...
                length(lb), [], [], [], [], lb, ub, [], [3, 4], algOptions);
        case  'patternsearch'
            x0 = [
                0.00025, ...
                0.6, ...
                4, ...
                6, ...
                0
            ];
            algOptions = optimoptions(...
                'patternsearch', ...
                'Display', 'iter', ...
                'UseParallel', true, ...
                'MeshTolerance', 1e-18, ...
                'TolX', 1e-12, ...
                'PlotFcn','psplotbestf');
            bestParams = patternsearch(@(params) ...
                runOptimization(params, dataCache, inputVars, outputVars, regValue, useMex), ...
                x0, [], [], [], [], lb, ub, [], algOptions);
    end
end

function fit = runOptimization(params, dataCache, inputVars, outputVars, useMex)
    trainData = dataCache{1};
    wellData = dataCache{2};
    range = dataCache{3};
    testData = wellData(:, inputVars);
    targets = wellData(:, outputVars);
    fit = fitness(params, trainData, testData, targets, range, outputVars, useMex);
end

function fit  = fitness(params, trainData, testData, targets, range, outputVars, useMex)
    options = {}; 
    options.tau = params(1); 
    options.delta = params(2);
    options.spMin = int32(params(3));
    options.vMin = int32(params(4));
    options.regValue = params(5);

    net = igmn(range, options);
    if useMex
        net = train_mex(net, trainData);
        outputs = predict_mex(net, testData, outputVars, 0);
    else
        net = train(net, trainData);
        outputs = predict(net, testData, outputVars);
    end
    fit = sum(sqrt(mean((targets - outputs) .^ 2)));
end

